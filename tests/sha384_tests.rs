/*++

Licensed under the Apache-2.0 license.

File Name:

    sha384_tests.rs

Abstract:

    File contains test cases for SHA-384 API

--*/

#![no_std]
#![no_main]

use caliptra_lib::Sha384;

mod harness;

fn test_digest0() {
    let expected: [u8; 48] = [
        0x38, 0xB0, 0x60, 0xA7, 0x51, 0xAC, 0x96, 0x38, 0x4C, 0xD9, 0x32, 0x7E, 0xB1, 0xB1, 0xE3,
        0x6A, 0x21, 0xFD, 0xB7, 0x11, 0x14, 0xBE, 0x07, 0x43, 0x4C, 0x0C, 0xC7, 0xBF, 0x63, 0xF6,
        0xE1, 0xDA, 0x27, 0x4E, 0xDE, 0xBF, 0xE7, 0x6F, 0x65, 0xFB, 0xD5, 0x1A, 0xD2, 0xF1, 0x48,
        0x98, 0xB9, 0x5B,
    ];
    let data = [];
    let actual = Sha384::digest(&data);
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_digest1() {
    let expected: [u8; 48] = [
        0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B, 0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50,
        0x07, 0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63, 0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF,
        0x5B, 0xED, 0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23, 0x58, 0xBA, 0xEC, 0xA1, 0x34,
        0xC8, 0x25, 0xA7,
    ];
    let data = "abc".as_bytes();
    let actual = Sha384::digest(data);
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_digest2() {
    let expected: [u8; 48] = [
        0x33, 0x91, 0xFD, 0xDD, 0xFC, 0x8D, 0xC7, 0x39, 0x37, 0x07, 0xA6, 0x5B, 0x1B, 0x47, 0x09,
        0x39, 0x7C, 0xF8, 0xB1, 0xD1, 0x62, 0xAF, 0x05, 0xAB, 0xFE, 0x8F, 0x45, 0x0D, 0xE5, 0xF3,
        0x6B, 0xC6, 0xB0, 0x45, 0x5A, 0x85, 0x20, 0xBC, 0x4E, 0x6F, 0x5F, 0xE9, 0x5B, 0x1F, 0xE3,
        0xC8, 0x45, 0x2B,
    ];
    let data = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq".as_bytes();
    let actual = Sha384::digest(data);
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_digest3() {
    let expected: [u8; 48] = [
        0x09, 0x33, 0x0C, 0x33, 0xF7, 0x11, 0x47, 0xE8, 0x3D, 0x19, 0x2F, 0xC7, 0x82, 0xCD, 0x1B,
        0x47, 0x53, 0x11, 0x1B, 0x17, 0x3B, 0x3B, 0x05, 0xD2, 0x2F, 0xA0, 0x80, 0x86, 0xE3, 0xB0,
        0xF7, 0x12, 0xFC, 0xC7, 0xC7, 0x1A, 0x55, 0x7E, 0x2D, 0xB9, 0x66, 0xC3, 0xE9, 0xFA, 0x91,
        0x74, 0x60, 0x39,
    ];
    let data = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu".as_bytes();
    let actual = Sha384::digest(data);
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_op0() {
    let expected: [u8; 48] = [
        0x38, 0xB0, 0x60, 0xA7, 0x51, 0xAC, 0x96, 0x38, 0x4C, 0xD9, 0x32, 0x7E, 0xB1, 0xB1, 0xE3,
        0x6A, 0x21, 0xFD, 0xB7, 0x11, 0x14, 0xBE, 0x07, 0x43, 0x4C, 0x0C, 0xC7, 0xBF, 0x63, 0xF6,
        0xE1, 0xDA, 0x27, 0x4E, 0xDE, 0xBF, 0xE7, 0x6F, 0x65, 0xFB, 0xD5, 0x1A, 0xD2, 0xF1, 0x48,
        0x98, 0xB9, 0x5B,
    ];
    let mut digest = Sha384::init_digest();
    let actual = digest.finalize();
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_op1() {
    let expected: [u8; 48] = [
        0x38, 0xB0, 0x60, 0xA7, 0x51, 0xAC, 0x96, 0x38, 0x4C, 0xD9, 0x32, 0x7E, 0xB1, 0xB1, 0xE3,
        0x6A, 0x21, 0xFD, 0xB7, 0x11, 0x14, 0xBE, 0x07, 0x43, 0x4C, 0x0C, 0xC7, 0xBF, 0x63, 0xF6,
        0xE1, 0xDA, 0x27, 0x4E, 0xDE, 0xBF, 0xE7, 0x6F, 0x65, 0xFB, 0xD5, 0x1A, 0xD2, 0xF1, 0x48,
        0x98, 0xB9, 0x5B,
    ];
    let data = [];
    let mut digest = Sha384::init_digest();
    assert!(digest.update(&data).is_ok());
    let actual = digest.finalize();
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_op2() {
    let expected: [u8; 48] = [
        0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B, 0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50,
        0x07, 0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63, 0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF,
        0x5B, 0xED, 0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23, 0x58, 0xBA, 0xEC, 0xA1, 0x34,
        0xC8, 0x25, 0xA7,
    ];
    let data = "abc".as_bytes();
    let mut digest = Sha384::init_digest();
    assert!(digest.update(&data).is_ok());
    let actual = digest.finalize();
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_op3() {
    let expected: [u8; 48] = [
        0x33, 0x91, 0xFD, 0xDD, 0xFC, 0x8D, 0xC7, 0x39, 0x37, 0x07, 0xA6, 0x5B, 0x1B, 0x47, 0x09,
        0x39, 0x7C, 0xF8, 0xB1, 0xD1, 0x62, 0xAF, 0x05, 0xAB, 0xFE, 0x8F, 0x45, 0x0D, 0xE5, 0xF3,
        0x6B, 0xC6, 0xB0, 0x45, 0x5A, 0x85, 0x20, 0xBC, 0x4E, 0x6F, 0x5F, 0xE9, 0x5B, 0x1F, 0xE3,
        0xC8, 0x45, 0x2B,
    ];
    let data = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq".as_bytes();
    let mut digest = Sha384::init_digest();
    assert!(digest.update(&data).is_ok());
    let actual = digest.finalize();
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_op4() {
    let expected: [u8; 48] = [
        0x09, 0x33, 0x0C, 0x33, 0xF7, 0x11, 0x47, 0xE8, 0x3D, 0x19, 0x2F, 0xC7, 0x82, 0xCD, 0x1B,
        0x47, 0x53, 0x11, 0x1B, 0x17, 0x3B, 0x3B, 0x05, 0xD2, 0x2F, 0xA0, 0x80, 0x86, 0xE3, 0xB0,
        0xF7, 0x12, 0xFC, 0xC7, 0xC7, 0x1A, 0x55, 0x7E, 0x2D, 0xB9, 0x66, 0xC3, 0xE9, 0xFA, 0x91,
        0x74, 0x60, 0x39,
    ];
    let data = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu".as_bytes();
    let mut digest = Sha384::init_digest();
    assert!(digest.update(&data).is_ok());
    let actual = digest.finalize();
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

fn test_op5() {
    let expected: [u8; 48] = [
        0x9D, 0x0E, 0x18, 0x09, 0x71, 0x64, 0x74, 0xCB, 0x08, 0x6E, 0x83, 0x4E, 0x31, 0x0A, 0x4A,
        0x1C, 0xED, 0x14, 0x9E, 0x9C, 0x00, 0xF2, 0x48, 0x52, 0x79, 0x72, 0xCE, 0xC5, 0x70, 0x4C,
        0x2A, 0x5B, 0x07, 0xB8, 0xB3, 0xDC, 0x38, 0xEC, 0xC4, 0xEB, 0xAE, 0x97, 0xDD, 0xD8, 0x7F,
        0x3D, 0x89, 0x85,
    ];
    const DATA: [u8; 1000] = [0x61; 1000];
    let mut digest = Sha384::init_digest();
    for _ in 0..1_000 {
        assert!(digest.update(&DATA).is_ok());
    }
    let actual = digest.finalize();
    assert!(actual.is_ok());
    assert_eq!(actual.unwrap(), expected);
}

test_suite! {
    test_digest0,
    test_digest1,
    test_digest2,
    test_digest3,
    test_op0,
    test_op1,
    test_op2,
    test_op3,
    test_op4,
    test_op5,
}
