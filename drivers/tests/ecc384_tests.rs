/*++

Licensed under the Apache-2.0 license.

File Name:

    ecc384_tests.rs

Abstract:

    File contains test cases for ECC-384 API tests

--*/

#![no_std]
#![no_main]

use caliptra_lib::{Ecc384, Ecc384PubKey, Ecc384Signature};

mod harness;

const PRIV_KEY: [u8; 48] = [
    0xc9, 0x8, 0x58, 0x5a, 0x48, 0x6c, 0x3b, 0x3d, 0x8b, 0xbe, 0x50, 0xeb, 0x7d, 0x2e, 0xb8, 0xa0,
    0x3a, 0xa0, 0x4e, 0x3d, 0x8b, 0xde, 0x2c, 0x31, 0xa8, 0xa2, 0xa1, 0xe3, 0x34, 0x9d, 0xc2, 0x1c,
    0xbb, 0xe6, 0xc9, 0xa, 0xe2, 0xf7, 0x49, 0x12, 0x88, 0x84, 0xb6, 0x22, 0xbb, 0x72, 0xb4, 0xc5,
];

const PUB_KEY_X: [u8; 48] = [
    0x9, 0x82, 0x33, 0xca, 0x56, 0x7a, 0x3f, 0x14, 0xbe, 0x78, 0x49, 0x4, 0xc6, 0x92, 0x1d, 0x43,
    0x3b, 0x4f, 0x85, 0x3a, 0x52, 0x37, 0x42, 0xe4, 0xbc, 0x98, 0x76, 0x7e, 0x23, 0xca, 0x3d, 0xa6,
    0x65, 0x6b, 0xec, 0x46, 0xa7, 0xb1, 0x11, 0x9e, 0x63, 0xd2, 0x66, 0xca, 0x62, 0x54, 0x97, 0x7f,
];

const PUB_KEY_Y: [u8; 48] = [
    0x75, 0xd0, 0xb4, 0x1, 0xc8, 0xba, 0xc3, 0x9a, 0xc5, 0xfb, 0xf, 0x2b, 0x3b, 0x95, 0x37, 0x2c,
    0x41, 0xd9, 0xde, 0x40, 0x55, 0xfd, 0xdb, 0x6, 0xf7, 0x48, 0x49, 0x74, 0x8d, 0xa, 0xed, 0x85,
    0x9b, 0x65, 0x50, 0xca, 0x75, 0xc, 0x3c, 0xd1, 0x18, 0x51, 0xe0, 0x50, 0xbb, 0x7d, 0x20, 0xb2,
];

const SIGNATURE_R: [u8; 48] = [
    0x36, 0xf8, 0x50, 0x14, 0x6f, 0x40, 0x4, 0x43, 0x84, 0x8c, 0xae, 0x3, 0x57, 0x59, 0x10, 0x32,
    0xe6, 0xa3, 0x95, 0xde, 0x66, 0xe7, 0x26, 0x1a, 0x3, 0x80, 0x49, 0xfb, 0xee, 0x15, 0xdb, 0x19,
    0x5d, 0xbd, 0x97, 0x86, 0x94, 0x39, 0x29, 0x2a, 0x4f, 0x57, 0x92, 0xe4, 0x3a, 0x12, 0x31, 0xb7,
];

const SIGNATURE_S: [u8; 48] = [
    0xee, 0xea, 0x42, 0x94, 0x82, 0xfd, 0x8f, 0xa9, 0xd4, 0xd5, 0xf9, 0x60, 0xa0, 0x9e, 0xdf, 0xa6,
    0xc7, 0x65, 0xef, 0xe5, 0xff, 0x4c, 0x17, 0xa5, 0x12, 0xe6, 0x94, 0xfa, 0xcc, 0x45, 0xd3, 0xf6,
    0xfc, 0x3d, 0x3b, 0x5c, 0x62, 0x73, 0x9c, 0x1f, 0xb, 0x9f, 0xca, 0xe3, 0x26, 0xf5, 0x4b, 0x43,
];

fn test_gen_key_pair() {
    let seed = [0u8; 48];
    let result = Ecc384::gen_key_pair(&seed);
    assert!(result.is_ok());
    let (priv_key, pub_key) = result.unwrap();
    assert_eq!(priv_key, PRIV_KEY);
    assert_eq!(pub_key.x, PUB_KEY_X);
    assert_eq!(pub_key.y, PUB_KEY_Y);
}

fn test_sign() {
    let digest = [0u8; 48];
    let mut signature = Ecc384Signature::default();
    let result = Ecc384::sign(&PRIV_KEY, &digest, &mut signature);
    assert!(result.is_ok());
    assert_eq!(signature.r, SIGNATURE_R);
    assert_eq!(signature.s, SIGNATURE_S);
}

fn test_verify() {
    let hash = [0u8; 48];
    let mut signature = Ecc384Signature::default();
    let result = Ecc384::sign(&PRIV_KEY, &hash, &mut signature);
    assert!(result.is_ok());
    let pub_key = Ecc384PubKey {
        x: PUB_KEY_X,
        y: PUB_KEY_Y,
    };
    let result = Ecc384::verify(&pub_key, &hash, &signature);
    assert!(result.is_ok());
    assert!(result.unwrap());
}

fn test_verify_failure() {
    let hash = [0u8; 48];
    let mut signature = Ecc384Signature::default();
    let result = Ecc384::sign(&PRIV_KEY, &hash, &mut signature);
    assert!(result.is_ok());
    let pub_key = Ecc384PubKey {
        x: PUB_KEY_X,
        y: PUB_KEY_Y,
    };
    let hash = [0xFFu8; 48];
    let result = Ecc384::verify(&pub_key, &hash, &signature);
    assert!(result.is_ok());
    assert!(!result.unwrap());
}

test_suite! {
    test_gen_key_pair,
    test_sign,
    test_verify,
    test_verify_failure,
}
